/*
 * generated by Xtext
 */
grammar InternalRecursive;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package xtend.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package xtend.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import xtend.services.RecursiveGrammarAccess;

}

@parser::members {
 
 	private RecursiveGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(RecursiveGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getProgramAccess().getStatementsAssignment()); }
(rule__Program__StatementsAssignment)
{ after(grammarAccess.getProgramAccess().getStatementsAssignment()); }
)
(
{ before(grammarAccess.getProgramAccess().getStatementsAssignment()); }
(rule__Program__StatementsAssignment)*
{ after(grammarAccess.getProgramAccess().getStatementsAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getGroup()); }
(rule__Statement__Group__0)
{ after(grammarAccess.getStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getAlternatives()); }
(rule__Type__Alternatives)
{ after(grammarAccess.getTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Type__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getIntKeyword_0()); }

	'Int' 

{ after(grammarAccess.getTypeAccess().getIntKeyword_0()); }
)

    |(
{ before(grammarAccess.getTypeAccess().getBoolKeyword_1()); }

	'Bool' 

{ after(grammarAccess.getTypeAccess().getBoolKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getVarKeyword_0()); }

	'var' 

{ after(grammarAccess.getStatementAccess().getVarKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__1__Impl
	rule__Statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getStatementAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__2__Impl
	rule__Statement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getStatementAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__3__Impl
	rule__Statement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getTypeParserRuleCall_3()); }
	ruleType
{ after(grammarAccess.getStatementAccess().getTypeParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__Program__StatementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0()); }
	ruleStatement{ after(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


