/*
 * generated by Xtext
 */
grammar InternalRecursive;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package xtend.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package xtend.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import xtend.services.RecursiveGrammarAccess;

}

@parser::members {

 	private RecursiveGrammarAccess grammarAccess;
 	
    public InternalRecursiveParser(TokenStream input, RecursiveGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Program";	
   	}
   	
   	@Override
   	protected RecursiveGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	 iv_ruleProgram=ruleProgram 
	 { $current=$iv_ruleProgram.current; } 
	 EOF 
;

// Rule Program
ruleProgram returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_0()); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProgramRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='var' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatementAccess().getVarKeyword_0());
    }
this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getStatementAccess().getIDTerminalRuleCall_1()); 
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getColonKeyword_2());
    }

    { 
        newCompositeNode(grammarAccess.getStatementAccess().getTypeParserRuleCall_3()); 
    }
    this_Type_3=ruleType
    { 
        $current = $this_Type_3.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatementAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getBaseTypeParserRuleCall_0()); 
    }
    this_BaseType_0=ruleBaseType
    { 
        $current = $this_BaseType_0.current; 
        afterParserOrEnumRuleCall();
    }
((	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getQuestionMarkKeyword_1_0_0());
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTypeAccess().getOptionallyTypeTypeAction_1_0_1(),
            $current);
    }
))
    |(	otherlv_3='!' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTypeAccess().getExclamationMarkKeyword_1_1_0());
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTypeAccess().getImplicitlyUnwrappedTypeTypeAction_1_1_1(),
            $current);
    }
)))*)
;





// Entry rule entryRuleBaseType
entryRuleBaseType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseTypeRule()); }
	 iv_ruleBaseType=ruleBaseType 
	 { $current=$iv_ruleBaseType.current; } 
	 EOF 
;

// Rule BaseType
ruleBaseType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBaseTypeAccess().getIntTypeAction_0_0(),
            $current);
    }
)	otherlv_1='Int' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBaseTypeAccess().getIntKeyword_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBaseTypeAccess().getBoolTypeAction_1_0(),
            $current);
    }
)	otherlv_3='Bool' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getBaseTypeAccess().getBoolKeyword_1_1());
    }
)
    |(	otherlv_4='[' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBaseTypeAccess().getLeftSquareBracketKeyword_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getBaseTypeAccess().getTypeParserRuleCall_2_1()); 
    }
    this_Type_5=ruleType
    { 
        $current = $this_Type_5.current; 
        afterParserOrEnumRuleCall();
    }
(
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBaseTypeAccess().getArrayTypeTypeAction_2_2(),
            $current);
    }
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBaseTypeAccess().getRightSquareBracketKeyword_2_3());
    }
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


