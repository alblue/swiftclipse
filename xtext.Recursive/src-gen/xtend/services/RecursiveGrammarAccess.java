/*
 * generated by Xtext
 */
package xtend.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RecursiveGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Program:
		//	statements+=Statement+;
		@Override public ParserRule getRule() { return rule; }

		//statements+=Statement+
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cTypeParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Statement:
		//	"var" ID ":" Type ";";
		@Override public ParserRule getRule() { return rule; }

		//"var" ID ":" Type ";"
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//Type
		public RuleCall getTypeParserRuleCall_3() { return cTypeParserRuleCall_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBaseTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Action cOptionallyTypeTypeAction_1_0_1 = (Action)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Action cImplicitlyUnwrappedTypeTypeAction_1_1_1 = (Action)cGroup_1_1.eContents().get(1);
		
		//// Should admit:
		//// var i:Int;
		//// var b:Bool;
		//// var ii:[Int];
		//// var bb:[Bool];
		//// var all:[Int?!?!]??!!
		//Type:
		//	BaseType ("?" {OptionallyType.type=current} | "!" {ImplicitlyUnwrappedType.type=current})*;
		@Override public ParserRule getRule() { return rule; }

		//BaseType ("?" {OptionallyType.type=current} | "!" {ImplicitlyUnwrappedType.type=current})*
		public Group getGroup() { return cGroup; }

		//BaseType
		public RuleCall getBaseTypeParserRuleCall_0() { return cBaseTypeParserRuleCall_0; }

		//("?" {OptionallyType.type=current} | "!" {ImplicitlyUnwrappedType.type=current})*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"?" {OptionallyType.type=current}
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0_0() { return cQuestionMarkKeyword_1_0_0; }

		//{OptionallyType.type=current}
		public Action getOptionallyTypeTypeAction_1_0_1() { return cOptionallyTypeTypeAction_1_0_1; }

		//"!" {ImplicitlyUnwrappedType.type=current}
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1_0() { return cExclamationMarkKeyword_1_1_0; }

		//{ImplicitlyUnwrappedType.type=current}
		public Action getImplicitlyUnwrappedTypeTypeAction_1_1_1() { return cImplicitlyUnwrappedTypeTypeAction_1_1_1; }
	}

	public class BaseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BaseType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cIntKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cBoolKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Action cArrayTypeTypeAction_2_2 = (Action)cGroup_2.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//BaseType returns Type:
		//	{IntType} "Int" | {BoolType} "Bool" | / * {ArrayType} * / "[" Type {ArrayType.type=current} "]";
		@Override public ParserRule getRule() { return rule; }

		//{IntType} "Int" | {BoolType} "Bool" | / * {ArrayType} * / "[" Type {ArrayType.type=current} "]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntType} "Int"
		public Group getGroup_0() { return cGroup_0; }

		//{IntType}
		public Action getIntTypeAction_0_0() { return cIntTypeAction_0_0; }

		//"Int"
		public Keyword getIntKeyword_0_1() { return cIntKeyword_0_1; }

		//{BoolType} "Bool"
		public Group getGroup_1() { return cGroup_1; }

		//{BoolType}
		public Action getBoolTypeAction_1_0() { return cBoolTypeAction_1_0; }

		//"Bool"
		public Keyword getBoolKeyword_1_1() { return cBoolKeyword_1_1; }

		/// * {ArrayType} * / "[" Type {ArrayType.type=current} "]"
		public Group getGroup_2() { return cGroup_2; }

		/// * {ArrayType} * / "["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//Type
		public RuleCall getTypeParserRuleCall_2_1() { return cTypeParserRuleCall_2_1; }

		//{ArrayType.type=current}
		public Action getArrayTypeTypeAction_2_2() { return cArrayTypeTypeAction_2_2; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
	}
	
	
	private final ProgramElements pProgram;
	private final StatementElements pStatement;
	private final TypeElements pType;
	private final BaseTypeElements pBaseType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RecursiveGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pStatement = new StatementElements();
		this.pType = new TypeElements();
		this.pBaseType = new BaseTypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("xtend.Recursive".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program:
	//	statements+=Statement+;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Statement:
	//	"var" ID ":" Type ";";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//// Should admit:
	//// var i:Int;
	//// var b:Bool;
	//// var ii:[Int];
	//// var bb:[Bool];
	//// var all:[Int?!?!]??!!
	//Type:
	//	BaseType ("?" {OptionallyType.type=current} | "!" {ImplicitlyUnwrappedType.type=current})*;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//BaseType returns Type:
	//	{IntType} "Int" | {BoolType} "Bool" | / * {ArrayType} * / "[" Type {ArrayType.type=current} "]";
	public BaseTypeElements getBaseTypeAccess() {
		return pBaseType;
	}
	
	public ParserRule getBaseTypeRule() {
		return getBaseTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
